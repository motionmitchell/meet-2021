{"version":3,"sources":["redux/eventSlice.js","components/EventForm.js","components/EventItem.js","components/EventList.js","components/Chart.js","components/MainView.js","App.js","redux/store.js","index.js"],"names":["eventList","server","emptyEvent","eventId","userId","date","time","city","capacity","contactInfo","name","email","website","title","description","status","getEventList","createAsyncThunk","payload","a","fetchCount","fetch","resp","ok","json","events","saveEventList","fetchEventList","tList","temp","localStorage","getItem","console","log","setItem","JSON","stringify","parse","length","fetchList","i","push","tl","pushEvent","event","updateEvent","msg","item","Date","getTime","makeChartData","backgroundColors","sort","b","data","labels","colors","lastCity","cnt","idx","chartData","datasets","label","backgroundColor","id","parseInt","pushEventToServer","method","headers","body","addEventItem","message","deleteEventItem","forEach","getEvent","eventSlice","createSlice","initialState","reducers","addEvent","state","action","deleteEvent","filter","extraReducers","fulfilled","actions","EventForm","useState","setEventId","eventDate","setEventDate","eventTime","setEventTime","setCity","setCapacity","contactName","setContactName","contactEmail","setContactEmail","setDescription","setTitle","setMessage","dispatch","useDispatch","useEffect","then","e","Container","onSubmit","preventDefault","eventObject","Row","Col","className","type","placeholder","value","onChange","target","EventItem","activeRowId","setActiveRowId","to","Button","onClick","pid","EventList","setEvents","eventCount","setEventCount","isLoaded","setIsLoaded","onBlur","alert","map","Chart","setChartData","defaultProps","options","display","text","fontSize","legend","position","MainView","exact","path","render","match","params","App","configureStore","reducer","eventReducer","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.1660cb7a.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nvar online = false;\nvar eventList = [];\nvar server = \"http://localhost:5000/\";\nconst emptyEvent = {\n\teventId: 1,\n\tuserId: 1,\n\tdate: \"\",\n\ttime: \"\",\n\tcity: \"\",\n\tcapacity: 32,\n\tcontactInfo: { name: \"\", email: \"\", website: \"\" },\n\ttitle: \"\",\n\tdescription: \"\",\n\tstatus: 0\n};\nexport const getEventList = createAsyncThunk(\n\t'todos/getEventList',\n\tasync (payload) => {\n\t\tconst fetchCount = payload.fetchCount;\n\t\ttry {\n\n\t\t\tconst resp = await fetch(server + 'events/' + fetchCount);\n\t\t\tif (resp.ok) {\n\t\t\t\tconst events = await resp.json();\n\t\t\t\tonline = true;\n\t\t\t\tsaveEventList(events);  // put into local storage (cache)\n\t\t\t\treturn { events };\n\t\t\t} else {\n\t\t\t\tonline = false;\n\t\t\t\tlet events = await fetchEventList(); // local storage for offline.\n\t\t\t\treturn { events }\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tonline = false;\n\t\t\tlet events = await fetchEventList(fetchCount); // local storage for offline.\n\t\t\treturn { events }\n\t\t}\n\t}\n);\nconst fetchEventList = async (fetchCount) => {\n\tlet tList = eventList;\n\tlet temp = localStorage.getItem(\"EVENTS\");\n\tconsole.log(\"TEMP\", temp);\n\tif (temp === null) {\n\t\tlocalStorage.setItem(\"EVENTS\", JSON.stringify(eventList));\n\t} else {\n\t\ttList = JSON.parse(temp);\n\t\tif (fetchCount < tList.length) {\n\t\t\tlet fetchList = [];\n\t\t\tfor (let i = 0; i < fetchCount; i++) {\n\t\t\t\tfetchList.push(tList[i]);\n\t\t\t}\n\t\t\ttList = fetchList;\n\t\t}\n\t}\n\tconsole.log(\"eventList\", tList);\n\treturn tList;\n}\nconst saveEventList = async (tl) => {\n\tlocalStorage.setItem(\"EVENTS\", JSON.stringify(tl));\n}\nconst pushEvent = async (event) => { // only offline.\n\tconsole.log(\"pushEvent\", event)\n\tif (event.eventId > 0) {\n\t\tconst msg = await updateEvent(event);\n\t\tif (msg !== \"updated\") {\n\t\t\tevent.eventId = -1;\n\t\t\tevent.title = msg;\n\t\t}\n\t\treturn event;\n\n\t}\n\tconst item =\n\t{\n\t\teventId: new Date().getTime(),\n\t\tuserId: event.userId,\n\t\tdate: event.date,\n\t\ttime: event.time,\n\t\tcity: event.city,\n\t\tcapacity: event.capacity,\n\t\tcontactInfo: event.contactInfo,\n\t\ttitle: event.title,\n\t\tdescription: event.description,\n\t\tstatus: 0\n\t}\n\tconsole.log(\"PUSH TO LOCAL \", item);\n\tlet temp = await fetchEventList();\n\tconsole.log(\"TEMP FROM FETCH\", temp);\n\ttemp.push(item);\n\tawait saveEventList(temp);\n\n\tconsole.log(\"temp\", temp);\n\n\treturn event;\n}\nexport const makeChartData = createAsyncThunk(\n\t'event/makeChartData',\n\n\tasync () => {\n\t\tlet temp = await fetchEventList();;\n\t\tconst backgroundColors = [\n\t\t\t'rgba(255, 99, 132, 0.6)',\n\t\t\t'rgba(54, 162, 235, 0.6)',\n\t\t\t'rgba(255, 206, 86, 0.6)',\n\t\t\t'rgba(75, 192, 192, 0.6)',\n\t\t\t'rgba(153, 102, 255, 0.6)',\n\t\t\t'rgba(255, 159, 64, 0.6)',\n\t\t\t'rgba(255, 99, 132, 0.6)'\n\t\t]\n\t\tconsole.log(\"makeChartData.start...\", temp);\n\t\tawait temp.sort((a, b) => {\n\t\t\treturn a.city > b.city;\n\t\t});\n\t\tconsole.log(\"TEMP\", temp);\n\n\t\tlet data = [];\n\t\tlet labels = [];\n\t\tlet colors = [];\n\t\tlet lastCity = temp[0].city;\n\t\tlet cnt = 0;\n\t\tdata.push(0);\n\t\tlabels.push(lastCity);\n\n\t\tcolors.push('rgba(255, 99, 132, 0.6)');\n\n\t\tfor (let i in temp) {\n\t\t\tconsole.log(cnt + \") CITY: \" + temp[i].city);\n\t\t\tif (temp[i].city !== lastCity) {\n\t\t\t\tconst idx = data.length - 1;\n\n\t\t\t\tdata[idx] = cnt;\n\t\t\t\tlastCity = temp[i].city;\n\t\t\t\tcnt = 1;\n\t\t\t\tcolors.push(backgroundColors[idx + 1]);\n\n\t\t\t\tdata.push(cnt);\n\t\t\t\tlabels.push(lastCity);\n\t\t\t} else {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\n\t\tdata[data.length - 1] = cnt;\n\t\tconst chartData = {\n\t\t\tlabels: labels,\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Events',\n\t\t\t\t\tdata: data,\n\t\t\t\t\tbackgroundColor: colors\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\tconsole.log(\"chartData\", chartData);\n\t\treturn chartData;\n\t}\n);\nconst synchServer = async () => {\n\tlet localData = []\n\tlet temp = await fetchEventList();\n\n\tfor (let i in temp) {\n\t\tif (temp[i].status === 0) {\n\t\t\tlocalData.push(temp[i]);\n\t\t}\n\t}\n\ttry {\n\t\tconst resp = await fetch(server + 'event/sync', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(localData),\n\t\t})\n\t\tif (resp.ok)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t} catch (e) {\n\t\treturn false; // local storage\n\t}\n}\nconst updateEvent = async (event) => {\n\tconsole.log(\"updateEvent: \", event)\n\tlet temp = await fetchEventList();\n\tconst id = parseInt(event.eventId);\n\tevent.eventId = id;\n\tfor (let i in temp) {\n\t\tconsole.log(id + \" COMPARE TO: \", temp[i]);\n\t\tif (temp[i].eventId === id) {\n\t\t\tconsole.log(\"UPDATING: \", event, temp[i]);\n\t\t\tif (temp[i].city !== event.city || temp[i].date !== event.date || temp[i].time !== event.time) {\n\t\t\t\treturn \"city/date/time change not allowed in offline mode\";\n\t\t\t}\n\t\t\ttemp[i] = event;\n\t\t}\n\t}\n\tawait saveEventList(temp);\n\treturn \"updated\";\n};\nconst pushEventToServer = async (event) => {\n\tconsole.log(\"pushEventToServer\", event)\n\n\tconst item =\n\t{\n\t\teventId: event.eventId,\n\t\tuserId: event.userId,\n\t\tdate: event.date,\n\t\ttime: event.time,\n\t\tcity: event.city,\n\t\tcapacity: event.capacity,\n\t\tcontactInfo: event.contactInfo,\n\t\ttitle: event.title,\n\t\tdescription: event.description\n\t}\n\n\ttry {\n\t\tconst resp = await fetch(server + 'event/add', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(item),\n\t\t})\n\t} catch (e) {\n\t\treturn await pushEvent(event); // local storage\n\t}\n\treturn event;\n}\nexport const addEventItem = createAsyncThunk(\n\t'event/addEventItem',\n\tasync (payload) => {\n\t\tconst msg = payload.event.eventId === 0 ? \"Event added\" : \"Event updated\";\n\t\tconst event = await pushEventToServer(payload.event);\n\n\t\tconsole.log(\"EVENT: \", event);\n\t\tconsole.log(\"EVENTS\", eventList);\n\n\t\tconsole.log(\"EVENT ADDED: \", event);\n\t\tconst message = (event.eventId > 0 ? msg : event.title);\n\t\tconsole.log(\"addEventItem.message: \" + message);\n\t\treturn { message };\n\t}\n);\n\nexport const deleteEventItem = createAsyncThunk(\n\t'todos/deleteEventItem',\n\tasync (payload) => {\n\t\tlet events = fetchEventList();\n\t\tlet temp = [];\n\n\t\tevents.forEach((item) => {\n\t\t\tif (item.id !== payload.id) {\n\t\t\t\ttemp.push(item);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"DELETING \", item);\n\t\t\t}\n\t\t});\n\t\tsaveEventList(temp);\n\n\t\treturn { id: payload.id };\n\t}\n);\nexport const getEvent = createAsyncThunk(\n\t'todos/getEvent',\n\tasync (payload) => {\n\n\t\tlet events = await fetchEventList();\n\t\tlet temp = { };\n\t\tconst id = parseInt(payload.id);\n\t\tif (id === 0) {\n\t\t\tconst event = emptyEvent;\n\t\t\treturn { event };\n\t\t}\n\t\tfor (let i in events) {\n\t\t\tconst event = events[i]\n\t\t\tif (event.eventId === id) {\n\t\t\t\tconsole.log(\"FOUND: \", event);\n\t\t\t\treturn { event };\n\t\t\t}\n\t\t}\n\t}\n);\nexport const eventSlice = createSlice({\n\tname: 'events',\n\tinitialState: [],\n\treducers: {\n\t\taddEvent: (state, action) => {\n\t\t\tconst event = action.payload.event;\n\n\t\t\tstate.push(event);\n\t\t},\n\t\tdeleteEvent: (state, action) => {\n\t\t\treturn state.filter((event) => event.id !== action.payload.id);\n\t\t},\n\t},\n\textraReducers: {\n\t\t[getEvent.fulfilled]: (state, action) => {\n\t\t\treturn action.payload.event;\n\t\t},\n\t\t[addEventItem.fulfilled]: (state, action) => {\n\t\t\treturn action.payload.message;\n\t\t},\n\t\t[getEvent.fulfilled]: (state, action) => {\n\t\t\treturn action.payload.event;\n\t\t},\n\t\t[makeChartData.fulfilled]: (state, action) => {\n\t\t\treturn action.payload.chartData;\n\t\t},\n\t\t[deleteEventItem.fulfilled]: (state, action) => {\n\t\t\treturn state.filter((event) => event.id !== action.payload.id);\n\t\t},\n\t},\n});\n\nexport const { addEvent, deleteEvent } = eventSlice.actions;\n\nexport default eventSlice.reducer;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addEventItem, getEvent } from '../redux/eventSlice';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n<link\r\n    rel=\"stylesheet\"\r\n    href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n    integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n    crossorigin=\"anonymous\"\r\n/>\r\nconst EventForm = ({ id }) => {\r\n    // const [event, setEvent] = useState({ });\r\n    const [eventId, setEventId] = useState(0);\r\n    const [eventDate, setEventDate] = useState('');\r\n    const [eventTime, setEventTime] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [capacity, setCapacity] = useState('');\r\n    const [contactName, setContactName] = useState('');\r\n    const [contactEmail, setContactEmail] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log(\"FORM: \" + id);\r\n        //  dispatch(getEvent(id));\r\n        setEventId(id);\r\n        dispatch(getEvent({ id: id })).then((data) => {\r\n\r\n            const e = data.payload.event;\r\n            // setEvent(e);\r\n            console.log(\"EVENT\", e);\r\n            setEventDate(e.date);\r\n            setEventTime(e.time);\r\n            setCity(e.city);\r\n            setCapacity(e.capacity);\r\n            setContactName(e.contactInfo.name);\r\n            setContactEmail(e.contactInfo.email);\r\n            setDescription(e.description);\r\n            setTitle(e.title);\r\n\r\n            //        this.setState({ movie: data.payload.movie, isLoaded: true });\r\n\r\n        })\r\n        //setLocation(eventObj.location);\r\n    }, []);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (title && eventDate && eventTime) {\r\n            const eventObject = {\r\n                eventId: eventId,\r\n                userId: 1,\r\n                date: eventDate,\r\n                time: eventTime,\r\n                city: city,\r\n                capacity: capacity,\r\n                contactInfo: { name: contactName, email: contactEmail },\r\n                title: title,\r\n                description: description\r\n            };\r\n            console.log(\"NEW EVENT\", eventObject);\r\n            dispatch(\r\n                addEventItem({\r\n                    event: eventObject,\r\n                })\r\n            ).then((resp) => {\r\n                setMessage(resp.payload.message)\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <form onSubmit={onSubmit} >\r\n                    <Row>\r\n\r\n                        <Col className=\"col-md-4\">\r\n                            <input\r\n                                type='date'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Event Date\"\r\n                                value={eventDate}\r\n                                onChange={(e) => setEventDate(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Event Time\"\r\n                                value={eventTime}\r\n                                onChange={(e) => setEventTime(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"City\"\r\n                                value={city}\r\n                                onChange={(e) => setCity(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Capacity\"\r\n                                value={capacity}\r\n                                onChange={(e) => setCapacity(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Contact Name\"\r\n                                value={contactName}\r\n                                onChange={(e) => setContactName(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Contact Email\"\r\n                                value={contactEmail}\r\n                                onChange={(e) => setContactEmail(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-md-4\">\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Title\"\r\n                                value={title}\r\n                                onChange={(e) => setTitle(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n\r\n                            <input\r\n                                type='text'\r\n                                className='form-control mb-2 mr-sm-2'\r\n                                placeholder=\"Description\"\r\n                                value={description}\r\n                                onChange={(e) => setDescription(e.target.value)}>\r\n                            </input>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <button type='submit' className='btn btn-primary mb-2'>\r\n                                Submit\r\n                            </button>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </form>\r\n                <div>{message}</div>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventForm;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteEventItem } from '../redux/eventSlice';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\n//import 'bootstrap/dist/css/bootstrap.css';\r\nconst EventItem = ({ id, event, activeRowId, setActiveRowId }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const expandClick = (pid) => {\r\n        //  alert(pid + \"=\" + activeRowId);\r\n        if (pid === activeRowId) {\r\n            setActiveRowId(0);\r\n            activeRowId = 0;\r\n        } else {\r\n            //   alert(\"set equal \" + activeRowId)\r\n            setActiveRowId(pid);\r\n            activeRowId = pid\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Row key=\"eventId\">\r\n\r\n            <Col className=\"col-md-4 text-start\">\r\n                <Link to={`/edit/${event.eventId}`}>{event.title}</Link>\r\n            </Col>\r\n            <Col className=\"col-md-4 text-start\">\r\n                {event.city}\r\n            </Col>\r\n            <Col>\r\n                <Button onClick={() => expandClick(event.eventId)}>...</Button>\r\n                {\r\n                    activeRowId === event.eventId ?\r\n                        <div>\r\n                            {event.date} | {event.time} |\r\n                            {event.description} |  {event.city}\r\n\r\n                            <hr />\r\n                        </div>\r\n                        : <span />\r\n                }\r\n            </Col>\r\n\r\n\r\n\r\n        </Row>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default EventItem;","import React, { useEffect, useState } from 'react';\r\nimport EventItem from './EventItem';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getEventList } from '../redux/eventSlice';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nconst EventList = () => {\r\n    const dispatch = useDispatch();\r\n    // const events = useSelector((state) => state.events);\r\n    const [events, setEvents] = useState([]);\r\n    const [eventCount, setEventCount] = useState(32);\r\n    const [activeRowId, setActiveRowId] = useState(0);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(getEventList({ fetchCount: eventCount })).then((data) => {\r\n            console.log(\"loaded\", data);\r\n            setEvents(data.payload.events);\r\n            setIsLoaded(true)\r\n        })\r\n    }, [eventCount]);\r\n    const changeEventCount = (e) => {\r\n        alert(eventCount);\r\n    }\r\n    return (\r\n        <Container>\r\n            <div>Events:<input type='text' value={eventCount} onChange={(e) => setEventCount(e.target.value)}\r\n                onBlur={changeEventCount} /></div>\r\n            {isLoaded ? events.map((event) => (\r\n\r\n                <EventItem id={event.eventId} event={event} activeRowId={activeRowId} setActiveRowId={setActiveRowId} />\r\n            )) : <div />}\r\n        </Container>\r\n    );\r\n};\r\nexport default EventList;","import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { makeChartData } from '../redux/eventSlice';\r\nimport { useDispatch } from 'react-redux';\r\nconst Chart = () => {\r\n    const dispatch = useDispatch();\r\n    const [chartData, setChartData] = useState([]);\r\n    const defaultProps = {\r\n        displayTitle: true,\r\n        displayLegend: true,\r\n        legendPosition: 'right',\r\n        location: 'City'\r\n    }\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(() => {\r\n        dispatch(makeChartData()).then((data) => {\r\n            console.log(data.payload)\r\n            setChartData(data.payload);\r\n            //alert(JSON.stringify(data.payload));\r\n            setIsLoaded(true);\r\n            // makeChartData();\r\n        })\r\n\r\n\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            {isLoaded ?\r\n                <Bar\r\n                    data={chartData}\r\n                    options={{\r\n                        title: {\r\n                            display: defaultProps.displayTitle,\r\n                            text: 'Events by city',\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: defaultProps.displayLegend,\r\n                            position: defaultProps.legendPosition\r\n                        }\r\n                    }}\r\n                />\r\n                : <div />\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default Chart;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\n\r\nimport EventForm from './EventForm';\r\nimport EventList from './EventList';\r\nimport Chart from './Chart';\r\nconst MainView = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div>version: 4</div>\r\n            <div className=\"left20px container\">\r\n\r\n                <span>\r\n\r\n                    <Link to={\"/events\"} > Events</Link>\r\n                    |<Link to={\"/form\"}> Add Event</Link>\r\n                    | <Link to={\"/chart\"}> Chart</Link>\r\n                </span>\r\n\r\n\r\n                <hr />\r\n            </div>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n\r\n                </Route>\r\n\r\n\r\n                <Route exact path=\"/events\">\r\n                    <EventList />\r\n                </Route>\r\n                <Route exact path=\"/chart\">\r\n                    <Chart />\r\n                </Route>\r\n\r\n                <Route path=\"/form\">\r\n                    <EventForm id={0} />\r\n                </Route>\r\n                <Route path=\"/edit/:eventId\"\r\n                    render={({ match }) => (\r\n                        <EventForm id={match.params.eventId} />\r\n                    )}\r\n                />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\n\r\nexport default MainView;","import React from 'react';\nimport MainView from './components/MainView';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='container bg-white p-4 mt-5'>\n        <h1>Events:</h1>\n        <MainView />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport eventReducer from './eventSlice';\n\nexport default configureStore({\n\treducer: {\n\t\tevents: eventReducer,\n\n\t},\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}